{"version":3,"sources":["store/modules/viakissKeyboardPattern.js","store/modules/index.js","store/index.js","store/configure.js","components/ProgressBar/ProgressBar.js","components/KeyboardPattern/PatternView/PatternView.js","templates/ViakissKeyboardPattern/ViakissKeyboardPatternTemplate.js","containers/ViakissKeyboardPatternContainer.js","pages/ViakissKeyboardPattern.js","App.js","Root.js","reportWebVitals.js","index.js"],"names":["SET_MESSAGE","initialState","createAction","Record","message","handleActions","state","payload","set","combineReducers","viakissKeyboardPattern","configure","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","modules","cx","classnames","bind","styles","ProgressBar","this","props","progress","max","text","p","pt","className","style","width","Component","defaultProps","PatternData","PatternItem","item","PatternView","items","List","inputCount","result","run","remainTime","startTime","timeFlag","timerAnimation","initPatterns","textLength","list","i","setState","resetPatterns","patterns","Math","floor","random","length","handleResult","clear","handleStop","handlePatternCheck","key","size","get","newItems","update","handleStart","Date","now","setInterval","maxTime","clearInterval","keyDown","e","input","String","fromCharCode","keyCode","toUpperCase","includes","renderPatterns","map","index","renderMessage","document","addEventListener","removeEventListener","toFixed","classNames","ViakissKeyboardPattern","keyboardPattern","ViakissKeyboardPatternContainer","connect","ViakissKeybordPattern","location","serach","match","App","path","component","Root","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bc4cad65.chunk.js","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport { Record } from \"immutable\";\r\n\r\nconst SET_MESSAGE = \"viakissKeyboardPattern/SET_MESSAGE\";\r\n\r\nexport const setMessage = createAction(SET_MESSAGE)\r\n\r\nconst initialState = Record({\r\n    message: \"\"\r\n})();\r\n\r\nexport default handleActions({\r\n    [SET_MESSAGE]: (state, { payload: message }) => {\r\n        return state.set(\"message\", message)\r\n    }\r\n}, initialState)","import { combineReducers } from \"redux\";\r\nimport viakissKeyboardPattern from \"./viakissKeyboardPattern\";\r\n\r\nexport default combineReducers({\r\n    viakissKeyboardPattern,\r\n})","import configure from \"./configure\";\r\n\r\nexport default configure();","import { createStore } from \"redux\";\r\nimport modules from \"./modules\";\r\n\r\nconst configure = () => {\r\n    const devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n    const store = createStore(modules, devTools);\r\n    return store;\r\n}\r\n\r\nexport default configure;","import React, { Component } from \"react\";\r\nimport styles from \"./ProgressBar.scss\"\r\nimport classnames from \"classnames/bind\"\r\n\r\nconst cx = classnames.bind(styles)\r\n\r\nclass ProgressBar extends Component {\r\n    static defaultProps = {\r\n        progress: 0,\r\n        max: 1,\r\n        text: null,\r\n    }\r\n\r\n    render() {\r\n        const { progress, max, text } = this.props\r\n        const p = progress * 100 / max\r\n        const pt = text === null ? `${p}%` : text\r\n\r\n        return <div className={cx(\"progress-bar-wrap\")}>\r\n            <div className={cx(\"progress\")}\r\n                style={{\r\n                    width: `${p}%`\r\n                }}>\r\n            </div>\r\n            <div className={cx(\"text\")}>{pt}</div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default ProgressBar;","import React, { Component } from \"react\";\r\nimport { List, Record } from \"immutable\";\r\nimport styles from \"./PatternView.scss\";\r\nimport classnames from \"classnames/bind\";\r\nimport ProgressBar from \"components/ProgressBar\";\r\n\r\nconst cx = classnames.bind(styles)\r\n\r\nconst PatternData = Record({\r\n    text: \"\",\r\n    state: \"ready\",\r\n})\r\n\r\nclass PatternItem extends Component {\r\n    static defaultProps = {\r\n        item: {\r\n            text: \"\",\r\n            state: \"ready\",\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { text, state } = this.props.item\r\n\r\n        return <div className={cx(\"pattern\", state)}>\r\n            {text}\r\n        </div>\r\n    }\r\n}\r\n\r\nclass PatternView extends Component {\r\n    static defaultProps = {\r\n        patterns: \"QWEASD\",\r\n        textLength: 8,\r\n        maxTime: 4000,\r\n    }\r\n\r\n    state = {\r\n        items: List([\r\n        ]),\r\n        inputCount: 0,\r\n        result: \"\",\r\n        run: false,\r\n        remainTime: 0,\r\n    }\r\n\r\n    startTime = 0\r\n    timeFlag = false\r\n    timerAnimation = null\r\n\r\n    initPatterns = () => {\r\n        const { textLength } = this.props\r\n\r\n        const list = []\r\n\r\n        for (var i = 0; i < textLength; i++) {\r\n            list[i] = PatternData({})\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            items: List(list)\r\n        })\r\n    }\r\n\r\n    resetPatterns = () => {\r\n        const { patterns, textLength } = this.props\r\n\r\n        const list = []\r\n\r\n        for (var i = 0; i < textLength; i++) {\r\n            list[i] = PatternData({\r\n                text: patterns[Math.floor(Math.random() * patterns.length)],\r\n                state: i === 0 ? \"current\" : \"ready\"\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            items: List(list)\r\n        })\r\n    }\r\n\r\n    handleResult = (clear) => {\r\n        if (clear) {\r\n            this.setState({\r\n                ...this.state,\r\n                result: \"success\",\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                ...this.state,\r\n                result: \"failure\",\r\n            })\r\n        }\r\n\r\n        this.timeFlag = true\r\n        this.handleStop()\r\n    }\r\n\r\n    handlePatternCheck = (key) => {\r\n        const { items, inputCount, run } = this.state\r\n        if (run && inputCount < items.size && !this.timeFlag) {\r\n\r\n            if (items.get(inputCount).text === key) {\r\n                var newItems = items.update(inputCount, item => item.set(\"state\", \"success\"))\r\n                if (inputCount + 1 < items.size) {\r\n                    newItems = newItems.update(inputCount + 1, item => item.set(\"state\", \"current\"))\r\n                }\r\n\r\n                this.setState({\r\n                    ...this.state,\r\n                    items: newItems,\r\n                })\r\n\r\n                if (inputCount === (items.size - 1)) {\r\n                    this.handleResult(true)\r\n                } else {\r\n                    this.setState({\r\n                        ...this.state,\r\n                        inputCount: inputCount + 1,\r\n                    })\r\n                }\r\n            } else {\r\n                this.handleResult(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleStart = () => {\r\n        this.resetPatterns()\r\n\r\n        this.startTime = Date.now()\r\n        this.timeFlag = false\r\n\r\n        this.timerAnimation = setInterval(() => {\r\n            const { maxTime } = this.props\r\n            const now = Date.now()\r\n            if (this.startTime + maxTime <= now) {\r\n                this.handleStop()\r\n            }\r\n            else {\r\n                this.setState({\r\n                    ...this.state,\r\n                    remainTime: now - this.startTime,\r\n                })\r\n            }\r\n        }, 50);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            inputCount: 0,\r\n            run: true,\r\n            result: \"\",\r\n        })\r\n    }\r\n\r\n    handleStop = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            remainTime: 0,\r\n            run: false,\r\n        })\r\n        this.timeFlag = true\r\n\r\n        clearInterval(this.timerAnimation)\r\n    }\r\n\r\n    keyDown = (e) => {\r\n        const { patterns } = this.props\r\n        const { run } = this.state\r\n        const input = String.fromCharCode(e.keyCode).toUpperCase()\r\n        if (patterns.includes(input)) {\r\n            this.handlePatternCheck(input)\r\n        }\r\n        else if (input === \" \") {\r\n            if (run) {\r\n                this.handleStop()\r\n            }\r\n            else {\r\n                this.handleStart()\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keyup\", this.keyDown)\r\n\r\n        this.initPatterns()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keyup\", this.keyDown)\r\n    }\r\n\r\n    renderPatterns = () => {\r\n        const { items } = this.state\r\n        const list = items.map((item, index) => {\r\n            return <PatternItem\r\n                key={index}\r\n                item={item}\r\n            />\r\n        })\r\n\r\n        return list\r\n    }\r\n\r\n    renderMessage = () => {\r\n        const { run, result } = this.state\r\n        if (!run && result === \"\") {\r\n            return (<div className={cx(\"message\")}>\r\n                Space 를 눌러 시작 해주세요\r\n            </div>)\r\n        }\r\n\r\n        if (result !== \"\")\r\n            return (<div className={cx(\"message\", result)}>\r\n                {result === \"success\" && \"성공!\"}\r\n                {result === \"failure\" && \"실패...\"}\r\n            </div>)\r\n\r\n        return null\r\n    }\r\n\r\n    render() {\r\n        const { maxTime } = this.props\r\n        const { remainTime } = this.state\r\n\r\n        return <div className={cx(\"pattern-view-wrap\")}>\r\n            <div className={cx(\"key-patterns\")}>\r\n                {this.renderPatterns()}\r\n            </div>\r\n            <div className={cx(\"timer-progress\")}>\r\n                <ProgressBar\r\n                    progress={maxTime - remainTime}\r\n                    max={maxTime}\r\n                    text={`${((maxTime - remainTime) / 1000).toFixed(1)}초`} />\r\n            </div>\r\n            {this.renderMessage()}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default PatternView;","import React from \"react\";\r\nimport styles from \"./ViakissKeyboardPatternTemplate.scss\";\r\nimport classNames from \"classnames/bind\";\r\n\r\nconst cx = classNames.bind(styles)\r\n\r\nconst ViakissKeyboardPattern = ({\r\n    keyboardPattern,\r\n}) => {\r\n    return (\r\n        <div className={cx(\"viakiss-keyboard-pattern-template\")}>\r\n\r\n            <div className={cx(\"keyboard-pattern\")}>\r\n                {keyboardPattern}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViakissKeyboardPattern;","import { PatternView } from \"components/KeyboardPattern\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ViakissKeyboardPatternTemplate from \"templates/ViakissKeyboardPattern\"\r\n\r\n// import { ViakissKeyboardPatternActions } from \"store/actionCreators\";\r\n\r\nclass ViakissKeyboardPatternContainer extends Component {\r\n    render() {\r\n        return <>\r\n            <ViakissKeyboardPatternTemplate\r\n                keyboardPattern={<PatternView />}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    ({ viakissKeyboardPattern }) => {\r\n        return {\r\n            message: viakissKeyboardPattern.message,\r\n        }\r\n    }\r\n)(ViakissKeyboardPatternContainer);","import React from \"react\";\r\nimport ViakissKeyboardPatternContainer from \"containers/ViakissKeyboardPatternContainer\"\r\n\r\nconst ViakissKeybordPattern = ({ location: { serach }, match }) => {\r\n    return (\r\n        <ViakissKeyboardPatternContainer />\r\n    )\r\n};\r\n\r\nexport default ViakissKeybordPattern;","import React, { Component } from 'react';\n\n// import axios from \"axios\";\n// import ThemeFormContainer from \"containers/ThemeFormContainer\";\nimport { Route } from \"react-router-dom\";\nimport {\n  ViakissKeyboardPattern\n} from \"pages\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Route path=\"/\" component={ViakissKeyboardPattern} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\"\r\nimport store from \"./store\";\r\nimport App from \"./App.js\"\r\n\r\nconst Root = () => (\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n)\r\n\r\nexport default Root;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles/base.scss\"\nimport Root from './Root';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}